"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUiServer = void 0;
const fs_1 = require("fs");
const http = __importStar(require("http"));
const path = __importStar(require("path"));
const util_1 = require("../util/util");
const DEV_MODE = !!process.env["DEV"];
const sourcePath = __dirname + "/../../..";
const cssPath = path.normalize(sourcePath + "/ui/ts");
const indexFilePath = path.normalize(sourcePath + "/ui/html/index.html");
const jsPath = path.normalize(sourcePath + "/build/ui/ts");
const tsPath = path.normalize(sourcePath);
function createUiServer(combinedOutputsJson) {
    return http.createServer(async (req, res) => {
        try {
            await handleRequest(req, res, combinedOutputsJson);
            res.statusCode = 200;
        }
        catch (e) {
            console.error(e);
            res.statusCode = 500;
        }
        res.end();
    });
}
exports.createUiServer = createUiServer;
function cached(res) {
    res.setHeader("Cache-Control", "max-age=365000000; immutable");
}
async function doesFileExistInFolder(filePath, folderPath) {
    return isPathInsideDir(filePath, folderPath)
        && await util_1.doesNotThrow(fs_1.promises.access(filePath))
        && (await fs_1.promises.stat(filePath)).isFile();
}
function endWith404(res) {
    res.statusCode = 404;
    res.write("No such endpoint.");
    res.end();
}
async function handleRequest(req, res, combinedOutputsJson) {
    var _a;
    const url = (_a = req.url) !== null && _a !== void 0 ? _a : "/";
    if (url === "/" || url === "/index.html") {
        cached(res);
        res.setHeader("Content-Type", "text/html");
        res.write(await fs_1.promises.readFile(indexFilePath));
        return;
    }
    if (url === "/json") {
        // do not cache
        res.setHeader("Content-Type", "text/json");
        res.write(combinedOutputsJson);
        return;
    }
    if (url.endsWith(".css")) {
        const targetFile = cssPath + "/" + url;
        if (!doesFileExistInFolder(targetFile, cssPath)) {
            return endWith404(res);
        }
        cached(res);
        res.setHeader("Content-Type", "text/css");
        res.write(await fs_1.promises.readFile(targetFile));
        return;
    }
    if (url.endsWith(".js")) {
        const targetFile = jsPath + "/" + url;
        if (!doesFileExistInFolder(targetFile, jsPath)) {
            return endWith404(res);
        }
        cached(res);
        res.setHeader("Content-Type", "text/javascript");
        res.write(await fs_1.promises.readFile(targetFile));
        return;
    }
    if (DEV_MODE && url.endsWith(".js.map")) {
        const targetFile = jsPath + "/" + url;
        if (!doesFileExistInFolder(targetFile, jsPath)) {
            return endWith404(res);
        }
        cached(res);
        res.setHeader("Content-Type", "application/json");
        res.write(await fs_1.promises.readFile(targetFile));
        return;
    }
    if (DEV_MODE && url.endsWith(".ts")) {
        const targetFile = tsPath + "/" + url;
        if (!doesFileExistInFolder(targetFile, tsPath)) {
            return endWith404(res);
        }
        cached(res);
        res.setHeader("Content-Type", "text/x-typescript");
        res.write(await fs_1.promises.readFile(targetFile));
        return;
    }
    return endWith404(res);
}
function isPathInsideDir(target, base) {
    return path.normalize(target).startsWith(base);
}
//# sourceMappingURL=ui-server.js.map